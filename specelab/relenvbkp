module RelEnvStructs :  sig
	module SpecLang : SpecLang
end

module RelEnv :sig
	include RelEnvStructs

	type reldesc = {ty : SpecLang.ProjTypeScheme.t;
                  map : (SpecLang.Con.t * SpecLang.Var.t list option *
                  SpecLang.RelLang.expr) list }

    exception RelNotFound of SpecLang.RelId.t
  	type t
  	val empty : t
  	val mem : t -> SpecLang.RelId.t -> bool
  	val find : t -> SpecLang.RelId.t -> reldesc
  	val add : t -> (SpecLang.RelId.t * reldesc) -> t
  	val addUniterp : t -> (SpecLang.RelId.t * SpecLang.ProjTypeScheme.t)
      -> t
  	val remove : t -> SpecLang.RelId.t -> t
  	val toVector : t -> (SpecLang.RelId.t * reldesc) vector
  	val layout : t -> Layout.t              


end